This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    layout.tsx
    page.tsx
  components/
    ui/
      button.tsx
      card.tsx
      carousel.tsx
      checkbox.tsx
      input.tsx
      sheet.tsx
      slider.tsx
  core/
    data/
      allJobs.ts
      featuredJobs.ts
      jobCategories.ts
    types/
      filters.ts
      job.ts
  features/
    job-categories/
      components/
        JobCategoriesChips.tsx
    job-listings/
      components/
        FeaturedJobCard.tsx
        FeaturedJobsCarousel.tsx
        JobGrid.tsx
        JobGridCard.tsx
    job-search/
      components/
        FeaturedJobCard.tsx
        FilterChips.tsx
        JobFiltersSidebar.tsx
        JobSearchPage.tsx
  lib/
    utils.ts
  shared/
    components/
      layout/
        Footer.tsx
        Header.tsx
  styles/
    globals.css
.firebaserc
.gitignore
components.json
eslint.config.mjs
firebase.json
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
vercel.json

================================================================
Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: src/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/core/data/allJobs.ts
================
import { Job } from '@/core/types/job';

export const allJobs: Job[] = [
  // Featured Jobs (already created)
  {
    id: 1,
    title: "Senior Software Engineer",
    company: "Stripe",
    description: "Join Stripe's infrastructure team to build scalable payment systems. Work with cutting-edge technology and solve complex distributed systems challenges.",
    location: "San Francisco, CA",
    type: "full-time",
    salaryMin: 180,
    salaryMax: 250,
    experience: 5,
    posted: "2 days ago",
    iconBg: "bg-blue-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>`,
    isFeatured: true
  },
  {
    id: 2,
    title: "Senior Product Designer",
    company: "Figma",
    description: "Lead design for Figma's core collaboration features. Shape the future of design tools used by millions of designers worldwide.",
    location: "New York, NY",
    type: "full-time",
    salaryMin: 160,
    salaryMax: 220,
    experience: 4,
    posted: "3 days ago",
    iconBg: "bg-purple-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/></svg>`,
    isFeatured: true
  },
  {
    id: 3,
    title: "Data Science Manager",
    company: "Spotify",
    description: "Lead a team of data scientists working on music recommendation algorithms. Drive insights that shape how users discover music.",
    location: "Remote",
    type: "full-time",
    salaryMin: 200,
    salaryMax: 280,
    experience: 6,
    posted: "1 day ago",
    iconBg: "bg-green-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/></svg>`,
    isFeatured: true
  },
  {
    id: 4,
    title: "Senior Product Manager",
    company: "Netflix",
    description: "Drive product strategy for Netflix's content discovery platform. Work with ML engineers to enhance personalization algorithms.",
    location: "Los Angeles, CA",
    type: "full-time",
    salaryMin: 170,
    salaryMax: 240,
    experience: 5,
    posted: "5 days ago",
    iconBg: "bg-red-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/><path fillRule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 002 2h4a2 2 0 002-2V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm2.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm2.45 4a2.5 2.5 0 10-4.9 0h4.9zM12 9a1 1 0 100 2h3a1 1 0 100-2h-3zm-1 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z" clipRule="evenodd"/></svg>`,
    isFeatured: true
  },
  {
    id: 5,
    title: "Frontend Engineer",
    company: "Slack",
    description: "Build the next generation of Slack's web and desktop applications. Work with React, TypeScript, and modern web technologies.",
    location: "Remote",
    type: "full-time",
    salaryMin: 150,
    salaryMax: 210,
    experience: 3,
    posted: "4 days ago",
    iconBg: "bg-yellow-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/></svg>`,
    isFeatured: true
  },

  // Additional Jobs for Grid
  {
    id: 6,
    title: "Backend Engineer",
    company: "Airbnb",
    description: "Build robust backend systems that power Airbnb's global marketplace. Work with microservices, APIs, and distributed systems.",
    location: "Austin, TX",
    type: "full-time",
    salaryMin: 140,
    salaryMax: 190,
    experience: 3,
    posted: "1 week ago",
    iconBg: "bg-pink-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 7,
    title: "DevOps Engineer",
    company: "GitHub",
    description: "Manage and optimize GitHub's infrastructure. Work with Kubernetes, Docker, and cloud platforms to ensure reliable service delivery.",
    location: "Remote",
    type: "full-time",
    salaryMin: 130,
    salaryMax: 180,
    experience: 4,
    posted: "3 days ago",
    iconBg: "bg-gray-800",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 8,
    title: "UX Researcher",
    company: "Adobe",
    description: "Conduct user research to inform product decisions across Adobe's Creative Cloud suite. Design and execute user studies.",
    location: "Seattle, WA",
    type: "full-time",
    salaryMin: 120,
    salaryMax: 160,
    experience: 2,
    posted: "5 days ago",
    iconBg: "bg-red-500",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/><path fillRule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 002 2h4a2 2 0 002-2V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 8a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 9,
    title: "Machine Learning Engineer",
    company: "Tesla",
    description: "Develop ML models for autonomous driving systems. Work on computer vision, neural networks, and real-time inference systems.",
    location: "Palo Alto, CA",
    type: "full-time",
    salaryMin: 180,
    salaryMax: 250,
    experience: 4,
    posted: "2 days ago",
    iconBg: "bg-black",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/></svg>`,
    isFeatured: false
  },
  {
    id: 10,
    title: "Mobile Developer",
    company: "Instagram",
    description: "Build and maintain Instagram's mobile applications. Work with React Native, iOS, and Android to deliver features to millions of users.",
    location: "Menlo Park, CA",
    type: "full-time",
    salaryMin: 160,
    salaryMax: 220,
    experience: 3,
    posted: "1 week ago",
    iconBg: "bg-gradient-to-r from-purple-500 to-pink-500",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 11,
    title: "Data Analyst",
    company: "Uber",
    description: "Analyze data to optimize Uber's operations and improve user experience. Work with SQL, Python, and data visualization tools.",
    location: "Chicago, IL",
    type: "full-time",
    salaryMin: 90,
    salaryMax: 130,
    experience: 2,
    posted: "4 days ago",
    iconBg: "bg-black",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z"/><path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z"/></svg>`,
    isFeatured: false
  },
  {
    id: 12,
    title: "Security Engineer",
    company: "Cloudflare",
    description: "Protect Cloudflare's infrastructure and customer data. Work on threat detection, incident response, and security automation.",
    location: "Remote",
    type: "full-time",
    salaryMin: 150,
    salaryMax: 200,
    experience: 5,
    posted: "6 days ago",
    iconBg: "bg-orange-500",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },

  // Part-time and Contract Jobs
  {
    id: 13,
    title: "Freelance Web Designer",
    company: "99designs",
    description: "Create stunning web designs for various clients. Flexible hours, work on exciting projects from different industries.",
    location: "Remote",
    type: "part-time",
    salaryMin: 50,
    salaryMax: 80,
    experience: 1,
    posted: "2 days ago",
    iconBg: "bg-green-500",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 14,
    title: "React Developer",
    company: "Freelancer.com",
    description: "Contract React development work. Build modern web applications using the latest React ecosystem tools and best practices.",
    location: "Remote",
    type: "contract",
    salaryMin: 70,
    salaryMax: 120,
    experience: 2,
    posted: "1 day ago",
    iconBg: "bg-blue-500",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 15,
    title: "Marketing Intern",
    company: "HubSpot",
    description: "Join our marketing team as an intern. Learn digital marketing, content creation, and analytics in a supportive environment.",
    location: "Boston, MA",
    type: "internship",
    salaryMin: 20,
    salaryMax: 25,
    experience: 0,
    posted: "3 days ago",
    iconBg: "bg-orange-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z"/><path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z"/></svg>`,
    isFeatured: false
  },

  // More diverse jobs to reach 20+ total
  {
    id: 16,
    title: "QA Engineer",
    company: "Atlassian",
    description: "Ensure product quality through comprehensive testing strategies. Work with automation tools and collaborate with development teams.",
    location: "Sydney, Australia",
    type: "full-time",
    salaryMin: 80,
    salaryMax: 120,
    experience: 3,
    posted: "1 week ago",
    iconBg: "bg-blue-700",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd"/></svg>`,
    isFeatured: false
  },
  {
    id: 17,
    title: "Technical Writer",
    company: "GitLab",
    description: "Create clear, comprehensive documentation for GitLab's platform. Work closely with engineering teams to document features and APIs.",
    location: "Remote",
    type: "full-time",
    salaryMin: 70,
    salaryMax: 100,
    experience: 2,
    posted: "5 days ago",
    iconBg: "bg-purple-700",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/></svg>`,
    isFeatured: false
  },
  {
    id: 18,
    title: "Product Marketing Manager",
    company: "Zoom",
    description: "Drive go-to-market strategies for Zoom's products. Work with cross-functional teams to launch features and grow user adoption.",
    location: "San Jose, CA",
    type: "full-time",
    salaryMin: 120,
    salaryMax: 160,
    experience: 4,
    posted: "2 days ago",
    iconBg: "bg-blue-600",
    icon: `<svg fill="currentColor" viewBox="0 0 20 20"><path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z"/><path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z"/></svg>`,
    isFeatured: false
  }
];

// Export featured jobs separately for the carousel
export const featuredJobs = allJobs.filter(job => job.isFeatured);

================
File: src/core/data/featuredJobs.ts
================
import { Job } from '@/core/types/job';

export const featuredJobs: Job[] = [
  {
    id: 1,
    title: "Senior Software Engineer",
    company: "Stripe",
    description: "Join Stripe's infrastructure team to build scalable payment systems. Work with cutting-edge technology and solve complex distributed systems challenges.",
    location: "San Francisco, CA",
    type: "full-time",
    salaryMin: 180,
    salaryMax: 250,
    experience: 5,
    posted: "2 days ago",
    iconBg: "bg-blue-600",
    icon: `<svg class="w-6 sm:w-8 h-6 sm:h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
      <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>`,
    isFeatured: true
  },
  {
    id: 2,
    title: "Senior Product Designer",
    company: "Figma",
    description: "Lead design for Figma's core collaboration features. Shape the future of design tools used by millions of designers worldwide.",
    location: "New York, NY",
    type: "full-time",
    salaryMin: 160,
    salaryMax: 220,
    experience: 4,
    posted: "3 days ago",
    iconBg: "bg-purple-600",
    icon: `<svg class="w-6 sm:w-8 h-6 sm:h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
      <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
    </svg>`,
    isFeatured: true
  },
  {
    id: 3,
    title: "Data Science Manager",
    company: "Spotify",
    description: "Lead a team of data scientists working on music recommendation algorithms. Drive insights that shape how users discover music.",
    location: "Remote",
    type: "full-time",
    salaryMin: 200,
    salaryMax: 280,
    experience: 6,
    posted: "1 day ago",
    iconBg: "bg-green-600",
    icon: `<svg class="w-6 sm:w-8 h-6 sm:h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
      <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
    </svg>`,
    isFeatured: true
  },
  {
    id: 4,
    title: "Senior Product Manager",
    company: "Netflix",
    description: "Drive product strategy for Netflix's content discovery platform. Work with ML engineers to enhance personalization algorithms.",
    location: "Los Angeles, CA",
    type: "full-time",
    salaryMin: 170,
    salaryMax: 240,
    experience: 5,
    posted: "5 days ago",
    iconBg: "bg-red-600",
    icon: `<svg class="w-6 sm:w-8 h-6 sm:h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
      <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
      <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 002 2h4a2 2 0 002-2V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm2.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm2.45 4a2.5 2.5 0 10-4.9 0h4.9zM12 9a1 1 0 100 2h3a1 1 0 100-2h-3zm-1 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z" clip-rule="evenodd"/>
    </svg>`,
    isFeatured: true
  },
  {
    id: 5,
    title: "Frontend Engineer",
    company: "Slack",
    description: "Build the next generation of Slack's web and desktop applications. Work with React, TypeScript, and modern web technologies.",
    location: "Remote",
    type: "full-time",
    salaryMin: 150,
    salaryMax: 210,
    experience: 3,
    posted: "4 days ago",
    iconBg: "bg-yellow-600",
    icon: `<svg class="w-6 sm:w-8 h-6 sm:h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
    </svg>`,
    isFeatured: true
  }
];

================
File: src/core/data/jobCategories.ts
================
export interface JobCategory {
  id: string;
  name: string;
  icon: string;
  count: number;
  color: string;
}

export const jobCategories: JobCategory[] = [
  {
    id: 'technology',
    name: 'Technology',
    icon: '💻',
    count: 156,
    color: 'bg-blue-100 text-blue-800 border-blue-200'
  },
  {
    id: 'design',
    name: 'Design',
    icon: '🎨',
    count: 89,
    color: 'bg-purple-100 text-purple-800 border-purple-200'
  },
  {
    id: 'marketing',
    name: 'Marketing',
    icon: '📈',
    count: 67,
    color: 'bg-green-100 text-green-800 border-green-200'
  },
  {
    id: 'finance',
    name: 'Finance',
    icon: '💰',
    count: 45,
    color: 'bg-yellow-100 text-yellow-800 border-yellow-200'
  },
  {
    id: 'sales',
    name: 'Sales',
    icon: '🤝',
    count: 78,
    color: 'bg-red-100 text-red-800 border-red-200'
  },
  {
    id: 'hr',
    name: 'Human Resources',
    icon: '👥',
    count: 34,
    color: 'bg-indigo-100 text-indigo-800 border-indigo-200'
  },
  {
    id: 'operations',
    name: 'Operations',
    icon: '⚙️',
    count: 56,
    color: 'bg-gray-100 text-gray-800 border-gray-200'
  },
  {
    id: 'healthcare',
    name: 'Healthcare',
    icon: '🏥',
    count: 42,
    color: 'bg-teal-100 text-teal-800 border-teal-200'
  }
];

================
File: src/core/types/filters.ts
================
export interface JobFilters {
  jobTypes: string[];
  experienceRange: {
    min: number;
    max: number;
  };
  salaryRange: {
    min: number;
    max: number;
  };
  locationTypes: string[];
}

export const defaultFilters: JobFilters = {
  jobTypes: [],
  experienceRange: { min: 0, max: 24 },
  salaryRange: { min: 0, max: 40 },
  locationTypes: []
};

================
File: src/core/types/job.ts
================
export interface Job {
  id: number;
  title: string;
  company: string;
  description: string;
  location: string;
  type: 'full-time' | 'part-time' | 'contract' | 'internship';
  salaryMin: number;
  salaryMax: number;
  experience: number;
  posted: string;
  iconBg: string;
  icon: string;
  isFeatured?: boolean;
}

================
File: src/features/job-categories/components/JobCategoriesChips.tsx
================
'use client';

import { useState } from 'react';
import { jobCategories, JobCategory } from '@/core/data/jobCategories';

interface JobCategoriesChipsProps {
  selectedCategory?: string;
  onCategorySelect?: (categoryId: string | null) => void;
}

export default function JobCategoriesChips({ 
  selectedCategory, 
  onCategorySelect 
}: JobCategoriesChipsProps) {
  const [activeCategory, setActiveCategory] = useState<string | null>(selectedCategory || null);

  const handleCategoryClick = (categoryId: string) => {
    const newCategory = activeCategory === categoryId ? null : categoryId;
    setActiveCategory(newCategory);
    onCategorySelect?.(newCategory);
  };

  return (
    <div className="py-6 border-b border-gray-200">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">Browse by Category</h3>
          {activeCategory && (
            <button
              onClick={() => handleCategoryClick(activeCategory)}
              className="text-sm text-gray-500 hover:text-gray-700 flex items-center"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
              Clear selection
            </button>
          )}
        </div>
        
        <div className="flex flex-wrap gap-3">
          {jobCategories.map((category) => (
            <CategoryChip
              key={category.id}
              category={category}
              isActive={activeCategory === category.id}
              onClick={() => handleCategoryClick(category.id)}
            />
          ))}
        </div>
      </div>
    </div>
  );
}

interface CategoryChipProps {
  category: JobCategory;
  isActive: boolean;
  onClick: () => void;
}

function CategoryChip({ category, isActive, onClick }: CategoryChipProps) {
  return (
    <button
      onClick={onClick}
      className={`
        inline-flex items-center px-4 py-2 rounded-full border transition-all duration-200
        hover:shadow-custom-sm hover:scale-105
        ${isActive 
          ? 'bg-primary text-white border-primary shadow-custom' 
          : `${category.color} hover:shadow-md`
        }
      `}
    >
      <span className="text-lg mr-2">{category.icon}</span>
      <span className="font-medium text-sm">{category.name}</span>
      <span className={`
        ml-2 px-2 py-0.5 rounded-full text-xs font-semibold
        ${isActive 
          ? 'bg-white/20 text-white' 
          : 'bg-white/70 text-gray-700'
        }
      `}>
        {category.count}
      </span>
    </button>
  );
}

================
File: src/features/job-listings/components/FeaturedJobCard.tsx
================
import { Job } from '@/core/types/job';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface FeaturedJobCardProps {
  job: Job;
}

export default function FeaturedJobCard({ job }: FeaturedJobCardProps) {
  return (
    <Card className="min-w-[280px] sm:min-w-[400px] lg:min-w-[500px] max-w-[280px] sm:max-w-[400px] lg:max-w-[500px] snap-start border-black transition-all duration-200 flex flex-col sm:flex-row h-[360px] sm:h-[280px]">
      <div className="w-full sm:w-48 h-32 sm:h-full overflow-hidden rounded-t-lg sm:rounded-l-lg sm:rounded-t-none flex-shrink-0 bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center p-4">
          <div className={`w-12 sm:w-16 h-12 sm:h-16 mx-auto mb-2 sm:mb-3 ${job.iconBg} rounded-lg flex items-center justify-center`}>
            <div 
              className="w-6 sm:w-8 h-6 sm:h-8 text-white"
              dangerouslySetInnerHTML={{ __html: job.icon }}
            />
          </div>
          <p className="text-xs sm:text-sm font-semibold text-blue-900">{job.company}</p>
        </div>
      </div>
      
      <CardContent className="p-4 flex flex-col flex-grow">
        <h3 className="font-semibold text-sm sm:text-base mb-2">{job.title}</h3>
        <p className="text-xs sm:text-sm text-gray-600 flex-grow mb-3">{job.description}</p>
        
        <div className="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 mb-3 text-xs sm:text-sm">
          <span className="flex items-center text-gray-600">
            <svg className="w-3 sm:w-4 h-3 sm:h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd"/>
            </svg>
            {job.location}
          </span>
          <span className="flex items-center text-gray-600">
            <svg className="w-3 sm:w-4 h-3 sm:h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd"/>
            </svg>
            {job.type.charAt(0).toUpperCase() + job.type.slice(1).replace('-', ' ')}
          </span>
        </div>
        
        <div className="flex items-center justify-between">
          <span className="bg-green-100 text-custom-text text-xs sm:text-sm font-semibold px-2 sm:px-3 py-1 rounded">
            ${job.salaryMin}k - ${job.salaryMax}k
          </span>
          <span className="text-xs sm:text-sm text-gray-500">{job.posted}</span>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/features/job-listings/components/FeaturedJobsCarousel.tsx
================
'use client';

import { useRef } from 'react';
import { Job } from '@/core/types/job';
import { Button } from '@/components/ui/button';
import FeaturedJobCard from './FeaturedJobCard';

interface FeaturedJobsCarouselProps {
  jobs: Job[];
}

export default function FeaturedJobsCarousel({ jobs }: FeaturedJobsCarouselProps) {
  const sliderRef = useRef<HTMLDivElement>(null);

  const scrollPrev = () => {
    if (sliderRef.current) {
      sliderRef.current.scrollBy({
        left: -sliderRef.current.offsetWidth / 2,
        behavior: 'smooth'
      });
    }
  };

  const scrollNext = () => {
    if (sliderRef.current) {
      sliderRef.current.scrollBy({
        left: sliderRef.current.offsetWidth / 2,
        behavior: 'smooth'
      });
    }
  };

  return (
    <section aria-label="Featured jobs" className="w-full">
      <div className="flex items-center justify-between mb-4 sm:mb-6">
        <h2 className="text-lg sm:text-xl md:text-2xl font-semibold">Featured Jobs</h2>
        <div className="flex gap-2">
          <Button 
            onClick={scrollPrev}
            variant="outline"
            size="icon"
            aria-label="Previous featured jobs" 
            className="border-black hover:shadow-custom-sm"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"/>
            </svg>
          </Button>
          <Button 
            onClick={scrollNext}
            variant="outline"
            size="icon"
            aria-label="Next featured jobs" 
            className="border-black hover:shadow-custom-sm"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"/>
            </svg>
          </Button>
        </div>
      </div>
      
      <div className="relative overflow-hidden">
        <div 
          ref={sliderRef}
          className="flex gap-4 sm:gap-6 overflow-x-auto scrollbar-hide snap-x snap-mandatory"
          style={{
            scrollbarWidth: 'none',
            msOverflowStyle: 'none',
          }}
        >
          {jobs.map((job) => (
            <FeaturedJobCard key={job.id} job={job} />
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/features/job-listings/components/JobGrid.tsx
================
'use client';

import { useState, useMemo } from 'react';
import { Job } from '@/core/types/job';
import { JobFilters } from '@/core/types/filters';
import { Button } from '@/components/ui/button';
import JobGridCard from './JobGridCard';
import FilterChips from '../../job-search/components/FilterChips';


interface JobGridProps {
  jobs: Job[];
  filters: JobFilters;
  onShowMobileFilters?: () => void;
  onFiltersChange?: (filters: JobFilters) => void; // Add this prop
}

export default function JobGrid({ jobs, filters, onShowMobileFilters, onFiltersChange }: JobGridProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 12;

  // Filter jobs based on active filters
  const filteredJobs = useMemo(() => {
    return jobs.filter(job => {
      // Job Type Filter
      if (filters.jobTypes.length > 0 && !filters.jobTypes.includes(job.type)) {
        return false;
      }

      // Experience Range Filter
      if (job.experience < filters.experienceRange.min || job.experience > filters.experienceRange.max) {
        return false;
      }

      // Salary Range Filter (convert to LPA: salary in thousands / 100)
      const salaryInLPA = job.salaryMin / 100;
      if (salaryInLPA < filters.salaryRange.min || salaryInLPA > filters.salaryRange.max) {
        return false;
      }

      // Location Type Filter (simplified - you can enhance this logic)
      if (filters.locationTypes.length > 0) {
        const isRemote = job.location.toLowerCase().includes('remote');
        const hasRemoteFilter = filters.locationTypes.includes('remote');
        const hasOnSiteFilter = filters.locationTypes.includes('on-site');
        const hasHybridFilter = filters.locationTypes.includes('hybrid');

        if (hasRemoteFilter && isRemote) return true;
        if ((hasOnSiteFilter || hasHybridFilter) && !isRemote) return true;
        if (filters.locationTypes.length > 0 && !hasRemoteFilter && isRemote) return false;
      }

      return true;
    });
  }, [jobs, filters]);

  // Pagination logic
  const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedJobs = filteredJobs.slice(startIndex, startIndex + itemsPerPage);

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Reset page when filters change
  useState(() => {
    setCurrentPage(1);
  });

  // Handle filter removal
  const handleRemoveFilter = (filterType: string, value?: string) => {
    if (!onFiltersChange) return;

    let newFilters = { ...filters };

    switch (filterType) {
      case 'jobType':
        newFilters.jobTypes = filters.jobTypes.filter(type => type !== value);
        break;
      case 'locationType':
        newFilters.locationTypes = filters.locationTypes.filter(type => type !== value);
        break;
      case 'experience':
        newFilters.experienceRange = { min: 0, max: 24 };
        break;
      case 'salary':
        newFilters.salaryRange = { min: 0, max: 40 };
        break;
    }

    onFiltersChange(newFilters);
  };

  const handleClearAllFilters = () => {
    if (!onFiltersChange) return;
    
    onFiltersChange({
      jobTypes: [],
      locationTypes: [],
      experienceRange: { min: 0, max: 24 },
      salaryRange: { min: 0, max: 40 }
    });
  };

  return (
    <div className="flex-1">
      {/* Results Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-lg sm:text-xl md:text-2xl font-semibold">
            All Jobs
          </h2>
          <p className="text-sm text-gray-600 mt-1">
            Showing {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredJobs.length)} of {filteredJobs.length} jobs
          </p>
        </div>
        
        <div className="flex items-center space-x-3">
          {/* Sort Dropdown */}
          <div className="hidden sm:block">
            <select className="border border-black rounded px-3 py-2 text-sm focus:ring-primary focus:border-primary">
              <option>Most Recent</option>
              <option>Salary: High to Low</option>
              <option>Salary: Low to High</option>
              <option>Most Relevant</option>
            </select>
          </div>

          {/* Mobile Filter Button */}
          <Button
            onClick={onShowMobileFilters}
            variant="outline"
            className="lg:hidden border border-black rounded-lg px-4 py-2 bg-white hover:bg-gray-50 hover:shadow-custom-sm transition-all duration-200 flex items-center space-x-2 font-medium"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth="2">
              <path strokeLinecap="round" strokeLinejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
            </svg>
            <span>Filters</span>
          </Button>
        </div>
      </div>

      {/* Filter Chips */}
      <FilterChips
        filters={filters}
        onRemoveFilter={handleRemoveFilter}
        onClearAll={handleClearAllFilters}
      />

      {/* Job Grid */}
      {paginatedJobs.length > 0 ? (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8">
            {paginatedJobs.map((job) => (
              <JobGridCard key={job.id} job={job} />
            ))}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-2">
              <Button
                variant="outline"
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="border-black hover:shadow-custom-sm"
              >
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"/>
                </svg>
                Previous
              </Button>

              <div className="flex space-x-1">
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNum;
                  if (totalPages <= 5) {
                    pageNum = i + 1;
                  } else if (currentPage <= 3) {
                    pageNum = i + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNum = totalPages - 4 + i;
                  } else {
                    pageNum = currentPage - 2 + i;
                  }

                  return (
                    <Button
                      key={pageNum}
                      variant={currentPage === pageNum ? "default" : "outline"}
                      onClick={() => handlePageChange(pageNum)}
                      className={currentPage === pageNum 
                        ? "bg-primary hover:bg-primary/90" 
                        : "border-black hover:shadow-custom-sm"
                      }
                    >
                      {pageNum}
                    </Button>
                  );
                })}
              </div>

              <Button
                variant="outline"
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="border-black hover:shadow-custom-sm"
              >
                Next
                <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"/>
                </svg>
              </Button>
            </div>
          )}
        </>
      ) : (
        <div className="text-center py-12">
          <svg className="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47.901-6.06 2.375l-.17.158.5.5A7.975 7.975 0 0112 21c2.34 0 4.47-.901 6.06-2.375l.17-.158-.5-.5z"/>
          </svg>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No jobs found</h3>
          <p className="text-gray-600">Try adjusting your filters to see more results.</p>
        </div>
      )}
    </div>
  );
}

================
File: src/features/job-listings/components/JobGridCard.tsx
================
import { Job } from '@/core/types/job';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface JobGridCardProps {
  job: Job;
}

export default function JobGridCard({ job }: JobGridCardProps) {
  return (
    <Card className="border-black hover:shadow-custom transition-all duration-200 h-full flex flex-col">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center space-x-3">
            <div className={`w-12 h-12 ${job.iconBg} rounded-lg flex items-center justify-center flex-shrink-0`}>
              <div 
                className="w-6 h-6 text-white"
                dangerouslySetInnerHTML={{ __html: job.icon }}
              />
            </div>
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold text-base truncate">{job.title}</h3>
              <p className="text-sm text-gray-600 truncate">{job.company}</p>
            </div>
          </div>
          <span className="bg-green-100 text-custom-text text-xs font-semibold px-2 py-1 rounded whitespace-nowrap ml-2">
            ${job.salaryMin}k - ${job.salaryMax}k
          </span>
        </div>
      </CardHeader>
      
      <CardContent className="pt-0 flex-1 flex flex-col">
        <p className="text-sm text-gray-600 mb-4 flex-1 line-clamp-3">
          {job.description}
        </p>
        
        <div className="space-y-3">
          <div className="flex flex-wrap gap-2 text-xs">
            <span className="flex items-center text-gray-600 bg-gray-100 px-2 py-1 rounded">
              <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd"/>
              </svg>
              {job.location}
            </span>
            <span className="flex items-center text-gray-600 bg-gray-100 px-2 py-1 rounded">
              <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd"/>
              </svg>
              {job.type.charAt(0).toUpperCase() + job.type.slice(1).replace('-', ' ')}
            </span>
            <span className="flex items-center text-gray-600 bg-gray-100 px-2 py-1 rounded">
              <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              {job.experience}+ years
            </span>
          </div>
          
          <div className="flex items-center justify-between pt-2">
            <span className="text-xs text-gray-500">{job.posted}</span>
            <Button size="sm" className="bg-primary hover:bg-primary/90 hover:shadow-custom-sm">
              Apply Now
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/features/job-search/components/FeaturedJobCard.tsx
================
import { Job } from '@/core/types/job';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface FeaturedJobCardProps {
  job: Job;
}

export default function FeaturedJobCard({ job }: FeaturedJobCardProps) {
  return (
    <Card className="min-w-[280px] sm:min-w-[400px] lg:min-w-[500px] max-w-[280px] sm:max-w-[400px] lg:max-w-[500px] snap-start border-black shadow-custom transition-all duration-200 flex flex-col sm:flex-row h-[360px] sm:h-[280px]">
      <div className="w-full sm:w-48 h-32 sm:h-full overflow-hidden rounded-t-lg sm:rounded-l-lg sm:rounded-t-none flex-shrink-0 bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center p-4">
          <div className={`w-12 sm:w-16 h-12 sm:h-16 mx-auto mb-2 sm:mb-3 ${job.iconBg} rounded-lg flex items-center justify-center`}>
            <div 
              className="w-6 sm:w-8 h-6 sm:h-8 text-white"
              dangerouslySetInnerHTML={{ __html: job.icon }}
            />
          </div>
          <p className="text-xs sm:text-sm font-semibold text-blue-900">{job.company}</p>
        </div>
      </div>
      
      <CardContent className="p-4 flex flex-col flex-grow">
        <h3 className="font-semibold text-sm sm:text-base mb-2">{job.title}</h3>
        <p className="text-xs sm:text-sm text-gray-600 flex-grow mb-3">{job.description}</p>
        
        <div className="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 mb-3 text-xs sm:text-sm">
          <span className="flex items-center text-gray-600">
            <svg className="w-3 sm:w-4 h-3 sm:h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd"/>
            </svg>
            {job.location}
          </span>
          <span className="flex items-center text-gray-600">
            <svg className="w-3 sm:w-4 h-3 sm:h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd"/>
            </svg>
            {job.type.charAt(0).toUpperCase() + job.type.slice(1).replace('-', ' ')}
          </span>
        </div>
        
        <div className="flex items-center justify-between">
          <span className="bg-green-100 text-custom-text text-xs sm:text-sm font-semibold px-2 sm:px-3 py-1 rounded">
            ${job.salaryMin}k - ${job.salaryMax}k
          </span>
          <span className="text-xs sm:text-sm text-gray-500">{job.posted}</span>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/features/job-search/components/FilterChips.tsx
================
'use client';

import { JobFilters } from '@/core/types/filters';
import { Button } from '@/components/ui/button';

interface FilterChipsProps {
  filters: JobFilters;
  onRemoveFilter: (filterType: string, value?: string) => void;
  onClearAll: () => void;
}

export default function FilterChips({ filters, onRemoveFilter, onClearAll }: FilterChipsProps) {
  const hasActiveFilters = 
    filters.jobTypes.length > 0 ||
    filters.locationTypes.length > 0 ||
    filters.experienceRange.min > 0 ||
    filters.experienceRange.max < 24 ||
    filters.salaryRange.min > 0 ||
    filters.salaryRange.max < 40;

  if (!hasActiveFilters) return null;

  const formatExperienceRange = () => {
    if (filters.experienceRange.min === 0 && filters.experienceRange.max === 24) return null;
    if (filters.experienceRange.min === filters.experienceRange.max) {
      return `${filters.experienceRange.min} years`;
    }
    return `${filters.experienceRange.min}-${filters.experienceRange.max === 24 ? '24+' : filters.experienceRange.max} years`;
  };

  const formatSalaryRange = () => {
    if (filters.salaryRange.min === 0 && filters.salaryRange.max === 40) return null;
    if (filters.salaryRange.min === filters.salaryRange.max) {
      return `${filters.salaryRange.min}LPA`;
    }
    return `${filters.salaryRange.min}-${filters.salaryRange.max === 40 ? '40+' : filters.salaryRange.max}LPA`;
  };

  const experienceText = formatExperienceRange();
  const salaryText = formatSalaryRange();

  return (
    <div className="flex flex-wrap items-center gap-2 mb-6 p-4 bg-gray-50 rounded-lg border">
      <span className="text-sm font-medium text-gray-700 mr-2">Active Filters:</span>
      
      {/* Job Types */}
      {filters.jobTypes.map((type) => (
        <FilterChip
          key={type}
          label={type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' ')}
          onRemove={() => onRemoveFilter('jobType', type)}
        />
      ))}

      {/* Location Types */}
      {filters.locationTypes.map((type) => (
        <FilterChip
          key={type}
          label={type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' ')}
          onRemove={() => onRemoveFilter('locationType', type)}
        />
      ))}

      {/* Experience Range */}
      {experienceText && (
        <FilterChip
          label={`Experience: ${experienceText}`}
          onRemove={() => onRemoveFilter('experience')}
        />
      )}

      {/* Salary Range */}
      {salaryText && (
        <FilterChip
          label={`Salary: ${salaryText}`}
          onRemove={() => onRemoveFilter('salary')}
        />
      )}

      {/* Clear All Button */}
      <Button
        onClick={onClearAll}
        variant="outline"
        size="sm"
        className="ml-2 border-red-300 text-red-600 hover:bg-red-50 hover:border-red-400"
      >
        Clear All
      </Button>
    </div>
  );
}

// Individual Filter Chip Component
interface FilterChipProps {
  label: string;
  onRemove: () => void;
}

function FilterChip({ label, onRemove }: FilterChipProps) {
  return (
    <div className="inline-flex items-center bg-primary/10 text-primary border border-primary/20 rounded-full px-3 py-1 text-sm">
      <span>{label}</span>
      <button
        onClick={onRemove}
        className="ml-2 hover:bg-primary/20 rounded-full p-0.5 transition-colors"
        aria-label={`Remove ${label} filter`}
      >
        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  );
}

================
File: src/features/job-search/components/JobFiltersSidebar.tsx
================
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Slider } from '@/components/ui/slider';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { JobFilters, defaultFilters } from '@/core/types/filters';

interface JobFiltersSidebarProps {
  filters: JobFilters;
  onFiltersChange: (filters: JobFilters) => void;
  onApplyFilters: () => void;
  onClearFilters: () => void;
}

export default function JobFiltersSidebar({
  filters,
  onFiltersChange,
  onApplyFilters,
  onClearFilters
}: JobFiltersSidebarProps) {
  const handleJobTypeChange = (value: string, checked: boolean) => {
    const newJobTypes = checked
      ? [...filters.jobTypes, value]
      : filters.jobTypes.filter(type => type !== value);
    
    onFiltersChange({
      ...filters,
      jobTypes: newJobTypes
    });
  };

  const handleLocationTypeChange = (value: string, checked: boolean) => {
    const newLocationTypes = checked
      ? [...filters.locationTypes, value]
      : filters.locationTypes.filter(type => type !== value);
    
    onFiltersChange({
      ...filters,
      locationTypes: newLocationTypes
    });
  };

  const handleExperienceRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      experienceRange: { min: value[0], max: value[1] }
    });
  };

  const handleSalaryRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      salaryRange: { min: value[0], max: value[1] }
    });
  };

  return (
    <div className="w-full lg:w-[280px] flex-shrink-0">
      <h2 className="text-lg sm:text-xl md:text-2xl font-semibold mb-4 sm:mb-6 hidden lg:block">Filters</h2>
      
      <Card className="hidden lg:block border-black hover:shadow-custom transition-all duration-200">
        <CardContent className="p-6 space-y-6">
          {/* Job Type */}
          <div className="border-b border-gray-200 pb-4">
            <h3 className="font-medium text-gray-700 mb-3">Job Type</h3>
            <div className="space-y-3">
              {[
                { value: 'full-time', label: 'Full-time' },
                { value: 'part-time', label: 'Part-time' },
                { value: 'contract', label: 'Contract' },
                { value: 'internship', label: 'Internship' }
              ].map(({ value, label }) => (
                <div key={value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`job-type-${value}`}
                    checked={filters.jobTypes.includes(value)}
                    onCheckedChange={(checked) => handleJobTypeChange(value, checked as boolean)}
                    className="data-[state=checked]:bg-primary data-[state=checked]:border-primary"
                  />
                  <label 
                    htmlFor={`job-type-${value}`}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    {label}
                  </label>
                </div>
              ))}
            </div>
          </div>

          {/* Experience Level */}
          <div className="border-b border-gray-200 pb-4">
            <h3 className="font-medium text-gray-700 mb-4">Experience Level</h3>
            <div className="space-y-3">
              <div className="flex justify-between text-sm font-medium">
                <span>{filters.experienceRange.min} years</span>
                <span>{filters.experienceRange.max === 24 ? '24+ years' : `${filters.experienceRange.max} years`}</span>
              </div>
              <Slider
                value={[filters.experienceRange.min, filters.experienceRange.max]}
                onValueChange={handleExperienceRangeChange}
                max={24}
                min={0}
                step={1}
                className="w-full"
              />
            </div>
          </div>

          {/* Location */}
          <div className="border-b border-gray-200 pb-4">
            <h3 className="font-medium text-gray-700 mb-3">Location</h3>
            <div className="space-y-3">
              {[
                { value: 'remote', label: 'Remote' },
                { value: 'on-site', label: 'On-site' },
                { value: 'hybrid', label: 'Hybrid' }
              ].map(({ value, label }) => (
                <div key={value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`location-${value}`}
                    checked={filters.locationTypes.includes(value)}
                    onCheckedChange={(checked) => handleLocationTypeChange(value, checked as boolean)}
                    className="data-[state=checked]:bg-primary data-[state=checked]:border-primary"
                  />
                  <label 
                    htmlFor={`location-${value}`}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    {label}
                  </label>
                </div>
              ))}
            </div>
          </div>

          {/* Salary Range */}
          <div className="pb-4">
            <h3 className="font-medium text-gray-700 mb-4">Salary Range</h3>
            <div className="space-y-3">
              <div className="flex justify-between text-sm font-medium">
                <span>{filters.salaryRange.min}LPA</span>
                <span>{filters.salaryRange.max === 40 ? '40LPA+' : `${filters.salaryRange.max}LPA`}</span>
              </div>
              <Slider
                value={[filters.salaryRange.min, filters.salaryRange.max]}
                onValueChange={handleSalaryRangeChange}
                max={40}
                min={0}
                step={1}
                className="w-full"
              />
            </div>
          </div>

          {/* Action Buttons */}
          <div className="pt-4 flex flex-col space-y-3">
            <Button
              onClick={onApplyFilters}
              className="w-full bg-black text-white hover:bg-primary hover:shadow-custom border border-black"
            >
              Apply Filters
            </Button>
            <Button
              onClick={onClearFilters}
              variant="outline"
              className="w-full border-black hover:bg-gray-100 hover:shadow-custom"
            >
              Clear All
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/features/job-search/components/JobSearchPage.tsx
================
'use client';

import { useState } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Slider } from '@/components/ui/slider';
import JobFiltersSidebar from './JobFiltersSidebar';
import JobGrid from '../../../features/job-listings/components/JobGrid';
import { JobFilters, defaultFilters } from '@/core/types/filters';
import { allJobs } from '@/core/data/allJobs';

export default function JobSearchPage() {
  const [filters, setFilters] = useState<JobFilters>(defaultFilters);
  const [isMobileFiltersOpen, setIsMobileFiltersOpen] = useState(false);

  const handleFiltersChange = (newFilters: JobFilters) => {
    setFilters(newFilters);
  };

  const handleApplyFilters = () => {
    // Filters are applied automatically through state
    console.log('Filters applied:', filters);
    // Close mobile filters after applying
    setIsMobileFiltersOpen(false);
  };

  const handleClearFilters = () => {
    setFilters(defaultFilters);
  };

  const handleShowMobileFilters = () => {
    setIsMobileFiltersOpen(true);
  };

  return (
    <div className="flex flex-col lg:flex-row gap-6 lg:gap-8">
      {/* Desktop Filters Sidebar */}
      <JobFiltersSidebar
        filters={filters}
        onFiltersChange={handleFiltersChange}
        onApplyFilters={handleApplyFilters}
        onClearFilters={handleClearFilters}
      />

      {/* Mobile Filters Sheet */}
      <Sheet open={isMobileFiltersOpen} onOpenChange={setIsMobileFiltersOpen}>
        <SheetContent side="bottom" className="h-[80vh] overflow-y-auto">
          <SheetHeader className="pb-4">
            <SheetTitle>Filter Jobs</SheetTitle>
          </SheetHeader>
          <div className="lg:hidden">
            <MobileJobFiltersSidebar
              filters={filters}
              onFiltersChange={handleFiltersChange}
              onApplyFilters={handleApplyFilters}
              onClearFilters={handleClearFilters}
            />
          </div>
        </SheetContent>
      </Sheet>

      {/* Job Grid with Filter Change Handler */}
      <JobGrid 
        jobs={allJobs} 
        filters={filters} 
        onShowMobileFilters={handleShowMobileFilters}
        onFiltersChange={handleFiltersChange}
      />
    </div>
  );
}


// Mobile version of filters with ShadCN components
interface MobileJobFiltersSidebarProps {
  filters: JobFilters;
  onFiltersChange: (filters: JobFilters) => void;
  onApplyFilters: () => void;
  onClearFilters: () => void;
}

function MobileJobFiltersSidebar({
  filters,
  onFiltersChange,
  onApplyFilters,
  onClearFilters
}: MobileJobFiltersSidebarProps) {
  const handleJobTypeChange = (value: string, checked: boolean) => {
    const newJobTypes = checked
      ? [...filters.jobTypes, value]
      : filters.jobTypes.filter(type => type !== value);
    
    onFiltersChange({
      ...filters,
      jobTypes: newJobTypes
    });
  };

  const handleLocationTypeChange = (value: string, checked: boolean) => {
    const newLocationTypes = checked
      ? [...filters.locationTypes, value]
      : filters.locationTypes.filter(type => type !== value);
    
    onFiltersChange({
      ...filters,
      locationTypes: newLocationTypes
    });
  };

  const handleExperienceRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      experienceRange: { min: value[0], max: value[1] }
    });
  };

  const handleSalaryRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      salaryRange: { min: value[0], max: value[1] }
    });
  };

  return (
    <div className="space-y-6 pb-6">
      {/* Job Type */}
      <div className="border-b border-gray-200 pb-4">
        <h3 className="font-medium text-gray-700 mb-3">Job Type</h3>
        <div className="space-y-3">
          {[
            { value: 'full-time', label: 'Full-time' },
            { value: 'part-time', label: 'Part-time' },
            { value: 'contract', label: 'Contract' },
            { value: 'internship', label: 'Internship' }
          ].map(({ value, label }) => (
            <div key={value} className="flex items-center space-x-2">
              <Checkbox
                id={`mobile-job-type-${value}`}
                checked={filters.jobTypes.includes(value)}
                onCheckedChange={(checked) => handleJobTypeChange(value, checked as boolean)}
                className="data-[state=checked]:bg-primary data-[state=checked]:border-primary"
              />
              <label 
                htmlFor={`mobile-job-type-${value}`}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                {label}
              </label>
            </div>
          ))}
        </div>
      </div>

      {/* Experience Level */}
      <div className="border-b border-gray-200 pb-4">
        <h3 className="font-medium text-gray-700 mb-4">Experience Level</h3>
        <div className="space-y-3">
          <div className="flex justify-between text-sm font-medium">
            <span>{filters.experienceRange.min} years</span>
            <span>{filters.experienceRange.max === 24 ? '24+ years' : `${filters.experienceRange.max} years`}</span>
          </div>
          <Slider
            value={[filters.experienceRange.min, filters.experienceRange.max]}
            onValueChange={handleExperienceRangeChange}
            max={24}
            min={0}
            step={1}
            className="w-full"
          />
        </div>
      </div>

      {/* Location */}
      <div className="border-b border-gray-200 pb-4">
        <h3 className="font-medium text-gray-700 mb-3">Location</h3>
        <div className="space-y-3">
          {[
            { value: 'remote', label: 'Remote' },
            { value: 'on-site', label: 'On-site' },
            { value: 'hybrid', label: 'Hybrid' }
          ].map(({ value, label }) => (
            <div key={value} className="flex items-center space-x-2">
              <Checkbox
                id={`mobile-location-${value}`}
                checked={filters.locationTypes.includes(value)}
                onCheckedChange={(checked) => handleLocationTypeChange(value, checked as boolean)}
                className="data-[state=checked]:bg-primary data-[state=checked]:border-primary"
              />
              <label 
                htmlFor={`mobile-location-${value}`}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                {label}
              </label>
            </div>
          ))}
        </div>
      </div>

      {/* Salary Range */}
      <div className="pb-4">
        <h3 className="font-medium text-gray-700 mb-4">Salary Range</h3>
        <div className="space-y-3">
          <div className="flex justify-between text-sm font-medium">
            <span>{filters.salaryRange.min}LPA</span>
            <span>{filters.salaryRange.max === 40 ? '40LPA+' : `${filters.salaryRange.max}LPA`}</span>
          </div>
          <Slider
            value={[filters.salaryRange.min, filters.salaryRange.max]}
            onValueChange={handleSalaryRangeChange}
            max={40}
            min={0}
            step={1}
            className="w-full"
          />
        </div>
      </div>

      {/* Action Buttons */}
      <div className="pt-4 flex flex-col space-y-3">
        <Button
          onClick={onApplyFilters}
          className="w-full bg-black text-white hover:bg-primary hover:shadow-custom border border-black"
        >
          Apply Filters
        </Button>
        <Button
          onClick={onClearFilters}
          variant="outline"
          className="w-full border-black hover:bg-gray-100 hover:shadow-custom"
        >
          Clear All
        </Button>
      </div>
    </div>
  );
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/shared/components/layout/Footer.tsx
================
export default function Footer() {
  return (
    <footer className="bg-black text-white py-12 w-full">
      <div className="w-full px-4 sm:px-6 xl:px-12 2xl:px-16">
        <div className="flex flex-col md:flex-row md:justify-between md:items-start space-y-8 md:space-y-0">
          <div className="w-full md:w-1/2 lg:w-2/5 pr-0 md:pr-8">
            <h2 className="text-2xl sm:text-3xl font-bold mb-4">
              Subscribe to get tips and tactics to grow the way you want.
            </h2>
            <form className="flex">
              <input
                type="email"
                placeholder="Your email address"
                className="flex-grow py-3 px-4 rounded-l-lg text-black focus:outline-none focus:ring-2 focus:ring-pink-500"
              />
              <button
                type="submit"
                className="bg-pink-500 text-white p-3 rounded-r-lg font-bold transition-colors duration-200 hover:bg-pink-600"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>
                </svg>
              </button>
            </form>
          </div>

          <div className="w-full md:w-1/2 lg:w-3/5 grid grid-cols-2 gap-y-8 gap-x-4 sm:gap-x-8 md:pl-8">
            <div>
              <h3 className="font-semibold text-lg mb-4">Discover</h3>
              <ul className="space-y-3 text-gray-300 text-sm">
                <li><a href="#" className="hover:underline">Blog</a></li>
                <li><a href="#" className="hover:underline">Pricing</a></li>
                <li><a href="#" className="hover:underline">Features</a></li>
                <li><a href="#" className="hover:underline">About</a></li>
                <li><a href="#" className="hover:underline">Small Bets</a></li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold text-lg mb-4">Help</h3>
              <ul className="space-y-3 text-gray-300 text-sm">
                <li><a href="#" className="hover:underline">Board meetings</a></li>
                <li><a href="#" className="hover:underline">Terms of Service</a></li>
                <li><a href="#" className="hover:underline">Privacy Policy</a></li>
              </ul>
            </div>
          </div>
        </div>

        <hr className="border-gray-700 my-8" />
        
        <div className="flex flex-col md:flex-row justify-between items-center text-sm text-gray-400 space-y-4 md:space-y-0">
          <div className="flex items-center">
            <span className="font-bold text-lg mr-2 text-white">Re:<span className="text-pink-500">Init</span></span> Marketplace, Inc.
          </div>
          <div className="flex space-x-6">
            <a href="#" className="hover:text-white transition-colors duration-200" aria-label="X (Twitter)">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M18.244 2.25h3.308l-7.227 8.260L21.619 22H18.29L12.003 14.94L5.275 22H2.029l7.558-8.65L1.884 2.25H5.16l5.265 6.074L18.244 2.25zm-1.114 17l-6.636-7.539L3.349 4.377H6.55L12.83 11.973L18.65 19h-1.526z"/>
              </svg>
            </a>
            <a href="#" className="hover:text-white transition-colors duration-200" aria-label="YouTube">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M19.615 3.184c-1.011-.321-3.417-.321-4.434-.321H8.818c-1.017 0-3.423 0-4.434.321C3.396 3.505 2.193 4.708 1.872 5.719 1.551 6.732 1.551 9.497 1.551 12s0 5.268.321 6.281c.324 1.011 1.527 2.214 2.538 2.535 1.011.322 3.417.322 4.434.322h6.363c1.017 0 3.423 0 4.434-.322 1.011-.321 2.214-1.524 2.535-2.535.321-1.013.321-3.778.321-6.281s0-5.268-.321-6.281c-.321-1.011-1.524-2.214-2.535-2.535zm-9.405 14.542V6.449L17.518 12l-7.308 5.726z"/>
              </svg>
            </a>
            <a href="#" className="hover:text-white transition-colors duration-200" aria-label="Instagram">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path fillRule="evenodd" d="M12 2C8.921 2 7.059 2.008 5.918 2.052A4.006 4.006 0 002.052 5.918C2.008 7.059 2 8.921 2 12s.008 4.941.052 6.082A4.006 4.006 0 005.918 21.948C7.059 21.992 8.921 22 12 22s4.941-.008 6.082-.052A4.006 4.006 0 0021.948 18.082C21.992 16.941 22 15.079 22 12s-.008-4.941-.052-6.082A4.006 4.006 0 0018.082 2.052C16.941 2.008 15.079 2 12 2zm0 3.73a6.27 6.27 0 100 12.54 6.27 6.27 0 000-12.54zM12 7.5a4.5 4.5 0 100 9 4.5 4.5 0 000-9zm6.5-2.25a.75.75 0 100 1.5.75.75 0 000-1.5z" clipRule="evenodd"/>
              </svg>
            </a>
            <a href="#" className="hover:text-white transition-colors duration-200" aria-label="Facebook">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path fillRule="evenodd" d="M12 2C6.477 2 2 6.477 2 12c0 5.018 3.657 9.155 8.443 9.876V14.65H8.054v-2.6h2.389v-1.928c0-2.373 1.454-3.666 3.567-3.666 1.026 0 1.905.076 2.16.11v2.547h-1.547c-1.218 0-1.455.578-1.455 1.423v1.85h2.89l-.427 2.6H13.68v7.226C18.337 21.154 22 17.018 22 12c0-5.523-4.477-10-10-10z" clipRule="evenodd"/>
              </svg>
            </a>
            <a href="#" className="hover:text-white transition-colors duration-200" aria-label="Pinterest">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M12 2C6.477 2 2 6.477 2 12c0 4.238 2.76 7.828 6.602 9.243.483.087.66-.209.66-.462 0-.227-.008-.827-.013-1.62-.26-.184-.576-.44-.755-.658-.65-.793-1.253-1.802-1.253-3.116C7.24 13.067 8.2 12 9.41 12c1.235 0 1.92.935 1.92 2.376 0 2.1-.884 3.914-2.203 4.502-.423.188-.838.283-1.238.283-.418 0-.8-.112-.962-.255-.175-.157-.27-.373-.27-.614 0-.495.176-.902.392-1.12.22-.22.518-.328.878-.328.665 0 1.13.655 1.13 1.505 0 .848-.48 1.488-1.173 1.488-1.573 0-2.613-1.637-2.613-3.834 0-2.015 1.41-3.656 3.86-3.656 2.052 0 3.39 1.472 3.39 3.42 0 .914-.308 1.638-.724 2.115-.176.2-.206.353-.13.666.07.29.28.98.356 1.255.078.29-.028.402-.303.298-1.785-.68-2.65-2.656-2.65-4.526 0-2.923 2.138-5.32 5.093-5.32 3.03 0 4.887 2.235 4.887 5.176 0 2.736-1.042 4.63-2.68 5.48-.12.06-.21.09-.31.09-.138 0-.23-.11-.275-.246-.07-.21-.12-.486-.12-1.08 0-1.42.845-2.583 1.9-3.04-.15-.41-.23-.88-.23-1.378C16 7.622 14.153 6 12 6z"/>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
}

================
File: src/shared/components/layout/Header.tsx
================
'use client';

import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Search query:', searchQuery);
    // TODO: Implement search functionality
  };

  return (
    <header className="bg-white border-b border-black w-full">
      <div className="w-full px-4 sm:px-6 xl:px-12 2xl:px-16">
        <div className="flex items-center justify-between h-16 lg:h-20">
          {/* Logo */}
          <div className="flex-shrink-0">
            <h1 className="text-xl sm:text-2xl font-bold">
              Re:<span className="text-primary">Init</span>
            </h1>
          </div>

          {/* Desktop Navigation */}
          <nav className="hidden lg:flex items-center space-x-8">
            <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium">
              Browse Jobs
            </a>
            <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium">
              Companies
            </a>
            <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium">
              Resources
            </a>
            <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium">
              About
            </a>
          </nav>

          {/* Search Bar */}
          <div className="hidden md:flex flex-1 max-w-md mx-4 lg:mx-8">
            <form onSubmit={handleSearch} className="relative w-full">
              <div className="relative">
                <Input
                  type="text"
                  placeholder="Search jobs, companies..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full h-12 pr-16 border-gray-400 focus:border-black"
                />
                <Button
                  type="submit"
                  size="default"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 px-4 bg-primary hover:bg-primary/90"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                  </svg>
                </Button>
              </div>
            </form>
          </div>

          {/* Desktop Auth Buttons */}
          <div className="hidden lg:flex items-center space-x-3">
            <Button 
              variant="outline" 
              size="default"
              className="border-black hover:bg-gray-100 hover:shadow-custom-sm px-5 py-2 h-10 text-base font-semibold"
            >
              Sign In
            </Button>
            <Button 
              size="default"
              className="bg-black text-white hover:bg-yellow-400 hover:text-black hover:shadow-custom-sm transition-colors duration-200 px-5 py-2 h-10 text-base font-semibold"
            >
              Post Job
            </Button>
          </div>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="lg:hidden p-2 rounded-md text-gray-700 hover:text-primary focus:outline-none"
            aria-label="Toggle menu"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              {isMenuOpen ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"/>
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"/>
              )}
            </svg>
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="lg:hidden border-t border-gray-200 py-4 space-y-4">
            {/* Mobile Search */}
            <form onSubmit={handleSearch} className="md:hidden">
              <div className="relative">
                <Input
                  type="text"
                  placeholder="Search jobs, companies..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full h-12 pr-16 border-gray-300  focus:border-black"
                />
                <Button
                  type="submit"
                  size="default"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 px-4 bg-primary hover:bg-primary/90"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                  </svg>
                </Button>
              </div>
            </form>

            {/* Mobile Navigation */}
            <nav className="flex flex-col space-y-3">
              <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium py-2">
                Browse Jobs
              </a>
              <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium">
                Companies
              </a>
              <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium py-2">
                Resources
              </a>
              <a href="#" className="text-gray-700 hover:text-primary transition-colors duration-200 font-medium py-2">
                About
              </a>
            </nav>

            {/* Mobile Auth Buttons */}
            <div className="flex flex-col space-y-3 pt-4 border-t border-gray-200">
              <Button 
                variant="outline" 
                size="default"
                className="border-black hover:bg-gray-100 h-10 text-base font-semibold"
              >
                Sign In
              </Button>
              <Button 
                size="default"
                className="bg-black text-white hover:bg-yellow-400 hover:text-black transition-colors duration-200 h-10 text-base font-semibold"
              >
                Post Job
              </Button>
            </div>
          </div>
        )}
      </div>
    </header>
  );
}

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Hide scrollbar */
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 330 81% 60%; /* Pink theme */
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 330 81% 60%; /* Pink focus ring */
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 330 81% 60%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 330 81% 60%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: .firebaserc
================
{
  "projects": {
    "default": "reinit-1d9e0"
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: firebase.json
================
{
  "hosting": {
    "public": "out",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/shared/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/features/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/core/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        'custom-bg': '#F4F4F4',
        'custom-border': '#A2B9A7',
        'custom-text': '#657C6A',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        }
      },
      boxShadow: {
        'custom': '4px 4px 0px #000',
        'custom-sm': '2px 2px 0px #000'
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      }
    }
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: vercel.json
================
{
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "devCommand": "npm run dev",
  "installCommand": "npm install",
  "functions": {
    "app/**/*.{js,ts,jsx,tsx}": {
      "maxDuration": 30
    }
  },
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/"
    }
  ]
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../styles/globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Re:Init Marketplace",
  description: "Find your perfect job opportunity",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import Header from '@/shared/components/layout/Header';
import Footer from '@/shared/components/layout/Footer';
import FeaturedJobsCarousel from '@/features/job-listings/components/FeaturedJobsCarousel';
import JobSearchPage from '@/features/job-search/components/JobSearchPage';
import { featuredJobs } from '@/core/data/allJobs';
import JobCategoriesChips from '@/features/job-categories/components/JobCategoriesChips';

export default function Home() {
  return (
    <div className="bg-custom-bg min-h-screen flex flex-col">
      <Header />
        {/* Job Categories Section */}
     
      <main className="flex-1 w-full px-4 sm:px-6 xl:px-12 2xl:px-16 py-4 sm:py-6 space-y-8">
        {/* Featured Jobs Section */}
        <FeaturedJobsCarousel jobs={featuredJobs} />
        
    
        {/* Main Job Search Section */}
        <JobSearchPage />
      </main>
      <Footer />
    </div>
  );
}

================
File: package.json
================
{
  "name": "web-reinit-v1",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "embla-carousel-react": "^8.6.0",
    "lucide-react": "^0.525.0",
    "next": "15.4.1",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.4.1",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;




================================================================
End of Codebase
================================================================
